<!-- ============================================ -->
<!-- STATS - Estatísticas com animação count-up   -->
<!-- ============================================ -->
<section class="py-12 md:py-16" style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-2 md:grid-cols-4 gap-6 md:gap-8">
            <% data.stats.forEach((stat, index) => { %>
                <div class="text-center stat-item" data-target="<%= stat.numero %>" data-delay="<%= index * 100 %>">
                    <div class="text-3xl sm:text-4xl md:text-5xl font-bold text-white mb-2 stat-number"><%= /^\d/.test(stat.numero) ? '0' : stat.numero %></div>
                    <div class="text-sm sm:text-base md:text-lg text-blue-100"><%= stat.label %></div>
                </div>
            <% }); %>
        </div>
    </div>
</section>

<script>
// Animação de count-up para estatísticas
function animateCountUp() {
    const statItems = document.querySelectorAll('.stat-item');

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting && !entry.target.classList.contains('counted')) {
                entry.target.classList.add('counted');
                const targetText = entry.target.getAttribute('data-target');
                const numberElement = entry.target.querySelector('.stat-number');

                // Extrair número e sufixo (ex: "15+" -> numero=15, sufixo="+")
                const match = targetText.match(/^([\d.,]+)(.*)$/);
                if (match) {
                    const targetNumber = parseFloat(match[1].replace(/\./g, '').replace(',', '.'));
                    const suffix = match[2];
                    const duration = 2000; // 2 segundos
                    const increment = targetNumber / (duration / 16); // 60fps
                    let currentNumber = 0;

                    const timer = setInterval(() => {
                        currentNumber += increment;
                        if (currentNumber >= targetNumber) {
                            currentNumber = targetNumber;
                            clearInterval(timer);
                        }

                        // Formatar número
                        let displayNumber = Math.floor(currentNumber);
                        if (targetText.includes('.')) {
                            displayNumber = displayNumber.toLocaleString('pt-BR');
                        }

                        numberElement.textContent = displayNumber + suffix;
                    }, 16);
                } else {
                    // Se não for número, exibir o texto diretamente (sem animação)
                    numberElement.textContent = targetText;
                }
            }
        });
    }, { threshold: 0.5 });

    statItems.forEach(item => observer.observe(item));
}

// Executar quando a página carregar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', animateCountUp);
} else {
    animateCountUp();
}
</script>
